"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var CritereEcritureDTO_1 = require('../../DTO/Ecriture/CritereEcritureDTO');
var HelperAjax_1 = require('../../Helper/HelperAjax');
//import { DetailHeroViewModel } from "./DetailHeroViewModel";
var ListEcritureViewModel = (function () {
    // SelectedEcriture: Demo.DTO.Ecriture.EcritureDTO;
    //#endregion
    //#region Constructeur
    /** Contructeur
     * author : LOUIS Yoann 08/09/2016
     */
    function ListEcritureViewModel() {
        //#region Property
        //YL - Déclaration des variables
        this.Title = "Liste des lignes d'écritures";
        this.ListEcriture = new Array();
        this.LoadListEcriture();
    }
    //#endregion Constructeur
    //#region Methode
    /** PErmet de charger les ecriture
     * author : LOUIS Yoann 08/09/2016
     */
    ListEcritureViewModel.prototype.LoadListEcriture = function () {
        var _this = this;
        // yl - critere de selection
        var Critere = new CritereEcritureDTO_1.CritereEcritureDTO();
        Critere.TakeCompte = true;
        Critere.TakeDossier = true;
        // yl - appel ajax du getitems sur le controleur ecriture
        HelperAjax_1.HelperAjax.AjaxJson("Ecriture", "GetItemsJSON", Critere, function (pValue) {
            pValue.forEach(function (pElement) {
                _this.ListEcriture.push(pElement);
            });
        });
    };
    ListEcritureViewModel = __decorate([
        core_1.Component({
            //gb - Indique le composant sur lequel binder le model
            selector: 'my-app',
            //gb - Indique le template du composant
            templateUrl: "app/Template/Ecriture/ListEcritureTemplate.html",
            //gb - Création du style CSS
            styles: ["\n          .selected {\n            background-color: #CFD8DC !important;\n            color: white;\n          }\n          .ListEcriture {\n            margin: 0 0 2em 0;\n            list-style-type: none;\n            padding: 0;\n            width: 15em;\n          }\n          .ListEcriture li {\n            cursor: pointer;\n            position: relative;\n            left: 0;\n            background-color: #EEE;\n            margin: .5em;\n            padding: .3em 0;\n            height: 1.6em;\n            border-radius: 4px;\n          }\n          .ListEcriture li.selected:hover {\n            background-color: #BBD8DC !important;\n            color: white;\n          }\n          .ListEcriture li:hover {\n            color: #607D8B;\n            background-color: #DDD;\n            left: .1em;\n          }\n          .ListEcriture .text {\n            position: relative;\n            top: -3px;\n          }\n          .ListEcriture .badge {\n            display: inline-block;\n            font-size: small;\n            color: white;\n            padding: 0.8em 0.7em 0 0.7em;\n            background-color: #607D8B;\n            line-height: 1em;\n            position: relative;\n            left: -1px;\n            top: -4px;\n            height: 1.8em;\n            margin-right: .8em;\n            border-radius: 4px 0 0 4px;\n          }\n\n        .grid {\n            width: 600px;\n            height: 450px;\n        }\n\n    "],
        }), 
        __metadata('design:paramtypes', [])
    ], ListEcritureViewModel);
    return ListEcritureViewModel;
}());
exports.ListEcritureViewModel = ListEcritureViewModel;
//# sourceMappingURL=ListEcritureViewModel.js.map